// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    //Preset for x

    // if (zx == 1) sets x = 0 
    //Mux16(a=x , b=false , sel=zx , out=presetXZero );

    // if (nx == 1) sets x = !x 
    //Not16(in=presetXZero , out=negateX);
    //Mux16(a=presetXZero , b=negateX , sel=nx , out=presetXNegate );

    //Preset for y

    // if (zy == 1) sets y = 0 
    //Mux16(a=y , b=false , sel=zy , out=presetYZero );

    // if (ny == 1) sets y = !y 
    //Not16(in=presetYZero , out=negateY);
    //Mux16(a=presetYZero , b=negateY , sel=ny , out=presetYNegate );
    Not16(in=x, out=presetXNegate);
    Not16(in=y, out=presetYNegate);
    Mux4Way16(a=x, b=false, c=presetXNegate, d=true, sel[0]=zx, sel[1]=nx, out=processedX);
    Mux4Way16(a=y, b=false, c=presetYNegate, d=true, sel[0]=zy, sel[1]=ny, out=processedY); 

    /*------------------------------------------------------------*/

    // if (f == 1)  sets out = x + y  // integer 2's complement addition
    // if (f == 0)  sets out = x & y  // bitwise and

    And16(a=processedX, b=processedY , out=bitwiseAnd);
    Add16(a=processedX, b=processedY , out=addition);

    Mux16(a=bitwiseAnd, b= addition, sel= f, out=fBit);
    
    /*------------------------------------------------------------*/

    // if (no == 1) sets out = !out   // bitwise not

    Not16(in=fBit, out= negateOut);
    Mux16(a=fBit, b= negateOut, sel= no, out=out,out[15]=ng,out[0..7]=outLSB,out[8..15]=outMSB);

    /*------------------------------------------------------------*/
    
    //zr,       if (out == 0) equals 1, else 0
    //ng;      // if (out < 0)  equals 1, else 0
    
    Or8Way(in=outLSB , out=orLSB);
    Or8Way(in=outMSB , out=orMSB);
    Or(a=orLSB, b=orMSB , out=preOutZr);
    Not(in= preOutZr, out= zr);





    



}